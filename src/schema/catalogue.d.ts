/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Constraints = Constraint[];
export type Modifier = {
  comment?: string;
  conditions?: Conditions;
  conditionGroups?: ConditionGroups;
  field: string;
  repeats?: Repeats;
  type: string;
  value: string | number | boolean;
} & (
  | {
      type?: "set" | "decrement" | "increment";
      /**
       * A field on the current entry such as 'hidden' or a cost id to modify
       */
      field?: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      type?: "append";
      /**
       * A field on the current entry such as 'name' to append the 'value' to
       */
      field?: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      type?: "add" | "remove" | "set-primary" | "unset-primary";
      field?: "category";
      /**
       * The category to add/remove/modify
       */
      value?: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
);
export type Condition = {
  /**
   * entry, entryGroup or category id to be counted in this condition
   */
  childId?: string;
  comment?: string;
  field?: (
    | ("selections" | "forces")
    | {
        [k: string]: unknown;
      }
  ) &
    string;
  includeChildForces?: boolean;
  includeChildSelections?: boolean;
  percentValue?: boolean;
  scope?: (
    | ("self" | "parent" | "force" | "roster" | "ancestor" | "primary-catalogue")
    | {
        [k: string]: unknown;
      }
  ) &
    string;
  /**
   * This field is mysterious and complicated.
   */
  shared?: boolean;
  type?: string;
  value?: string | number;
} & (
  | {
      type?: "greaterThan" | "lessThan" | "atMost" | "atLeast" | "equalTo" | "notEqualTo";
      value?: number;
      [k: string]: unknown;
    }
  | {
      type?: "instanceOf" | "notInstanceOf";
      /**
       * When a condition references an entry id, percentValue must be false or undefined
       */
      percentValue?: false;
      [k: string]: unknown;
    }
);
export type Conditions = Condition[];
export type ConditionGroups = ConditionGroup[];
export type Repeats = Repeat[];
export type Modifiers = Modifier[];
export type ModifierGroups = ModifierGroup[];
export type Rules = Rule[];
export type CategoryLinks = CategoryLink[];
export type InfoLinks = InfoLink[];
export type Profiles = Profile[];
export type InfoGroups = InfoGroup[];
/**
 * Types of cost this game system uses
 */
export type CostTypes = {
  comment?: string;
  defaultCostLimit: number;
  hidden?: boolean;
  id: string;
  name: string;
}[];
export type Costs = {
  name: string;
  /**
   * References a costType
   */
  typeId: string;
  value: number;
}[];
export type SelectionEntryLinks = SelectionEntryLink[];
export type SelectionEntryGroups = SelectionEntryGroup[];
export type SelectionEntries = SelectionEntry[];
export type ForceEntries1 = ForceEntry[];
export type ForceEntries = ForceEntry[];
/**
 * profile types this game system uses
 */
export type ProfileTypes = {
  comment?: string;
  id: string;
  name: string;
  /**
   * @minItems 1
   */
  characteristicTypes?: [CharacteristicType, ...CharacteristicType[]];
}[];

/**
 * A catalogue file, data about a catalogue within a game system for use with any number of roster building tools
 */
export interface BSDCatalogue {
  /**
   * How to get a hold of the catalogues's maintaners
   */
  authorContact?: string;
  /**
   * The name(s) of the authors/maintaners
   */
  authorName?: string;
  /**
   * The authors/maintaners website or other URL
   */
  authorUrl?: string;
  /**
   * If this datafile is battlescribe-compatible, which version is required
   */
  battleScribeVersion?: string;
  catalogueLinks?: {
    id: string;
    importRootEntries?: boolean;
    name: string;
    /**
     * References a catalogue
     */
    targetId: string;
    type?: "catalogue";
  }[];
  categoryEntries?: Category[];
  comment?: string;
  costTypes?: CostTypes;
  entryLinks?: SelectionEntryLink[];
  forceEntries?: ForceEntries;
  /**
   * References a gameSystem
   */
  gameSystemId: string;
  /**
   * Revision of the gameSystem this catalogue relies on
   */
  gameSystemRevision?: number;
  id: string;
  infoLinks?: InfoLink[];
  library?: boolean;
  name: string;
  profileTypes?: ProfileTypes;
  /**
   * publications that should be listed in every roster using this catalogue
   */
  publications?: Publication[];
  /**
   * Additional information about this game system
   */
  readme?: string;
  /**
   * Incrementing revision number for this catalogue
   */
  revision: number;
  rules?: Rule[];
  selectionEntries?: SelectionEntry[];
  sharedInfoGroups?: InfoGroup[];
  sharedProfiles?: Profile[];
  sharedRules?: Rule[];
  sharedSelectionEntries?: SelectionEntry[];
  sharedSelectionEntryGroups?: SelectionEntryGroup[];
  /**
   * Identifies this object as a gameSystem (as opposed to a catalogue or roster)
   */
  type: "catalogue";
}
export interface Category {
  comment?: string;
  constraints?: Constraints;
  hidden?: boolean;
  id: string;
  infoLinks?: InfoLinks;
  infoGroups?: InfoGroups;
  modifiers?: Modifiers;
  modifierGroups?: ModifierGroups;
  name: string;
  page?: number | string;
  profiles?: Profiles;
  /**
   * References a publication
   */
  publicationId?: string;
  rules?: Rules;
}
export interface Constraint {
  comment?: string;
  field: ("selections" | "forces") | string;
  id: string;
  includeChildForces?: boolean;
  includeChildSelections?: boolean;
  percentValue?: boolean;
  scope: (
    | ("self" | "parent" | "force" | "roster" | "ancestor" | "primary-catalogue")
    | {
        [k: string]: unknown;
      }
  ) &
    string;
  /**
   * This field is mysterious and complicated.
   */
  shared?: boolean;
  type?: "min" | "max";
  value?: number;
}
export interface InfoLink {
  categoryLinks?: CategoryLinks;
  collective?: boolean;
  comment?: string;
  constraints?: Constraints;
  hidden?: boolean;
  id: string;
  modifiers?: Modifiers;
  modifierGroups?: ModifierGroups;
  name?: string;
  page?: number | string;
  /**
   * References a publication
   */
  publicationId?: string;
  /**
   * References a rule, profile or infoGroup
   */
  targetId: string;
  type?: "rule" | "profile" | "infoGroup";
}
export interface CategoryLink {
  comment?: string;
  constraints?: Constraints;
  hidden?: boolean;
  id: string;
  modifiers?: Modifiers;
  modifierGroups?: ModifierGroups;
  name?: string;
  page?: number | string;
  primary?: boolean;
  /**
   * References a publication
   */
  publicationId?: string;
  rules?: Rules;
  /**
   * References a category
   */
  targetId: string;
}
export interface ConditionGroup {
  comment?: string;
  conditions?: Conditions;
  conditionGroups?: ConditionGroups;
  type?: "and" | "or";
}
export interface Repeat {
  /**
   * entry, entryGroup or category id to be counted in this condition
   */
  childId?: string;
  comment?: string;
  field: ("selections" | "forces") | string;
  includeChildForces?: boolean;
  includeChildSelections?: boolean;
  percentValue?: boolean;
  repeats?: number;
  roundUp?: boolean;
  scope: (
    | ("self" | "parent" | "force" | "roster" | "ancestor" | "primary-catalogue")
    | {
        [k: string]: unknown;
      }
  ) &
    string;
  /**
   * This field is mysterious and complicated.
   */
  shared?: boolean;
  value: number;
}
export interface ModifierGroup {
  comment?: string;
  conditions?: Conditions;
  conditionGroups?: ConditionGroups;
  modifiers?: Modifiers;
  modifierGroups?: ModifierGroups;
  repeats?: Repeats;
}
export interface Rule {
  comment?: string;
  description?: string;
  hidden?: boolean;
  id: string;
  modifiers?: Modifiers;
  modifierGroups?: ModifierGroups;
  name: string;
  page?: number | string;
  /**
   * References a publication
   */
  publicationId?: string;
}
export interface InfoGroup {
  hidden?: boolean;
  id: string;
  infoGroups?: InfoGroups;
  infoLinks?: InfoLinks;
  modifiers?: Modifiers;
  modifierGroups?: ModifierGroups;
  name?: string;
  page?: number | string;
  profiles?: Profiles;
  /**
   * References a publication
   */
  publicationId?: string;
  rules?: Rules;
}
export interface Profile {
  characteristics: {
    "#text"?: string;
    name: string;
    /**
     * References a characteristicType
     */
    typeId: string;
  }[];
  comment?: string;
  hidden?: boolean;
  id: string;
  modifiers?: Modifiers;
  modifierGroups?: ModifierGroups;
  name?: string;
  page?: number | string;
  /**
   * References a publication
   */
  publicationId?: string;
  /**
   * References a profileType
   */
  typeId: string;
  typeName?: string;
}
export interface SelectionEntryLink {
  categoryLinks?: CategoryLinks;
  collective?: boolean;
  comment?: string;
  constraints?: Constraints;
  costs?: Costs;
  entryLinks?: SelectionEntryLinks;
  hidden?: boolean;
  id: string;
  infoLinks?: InfoLinks;
  infoGroups?: InfoGroups;
  modifiers?: Modifiers;
  modifierGroups?: ModifierGroups;
  name?: string;
  page?: number | string;
  profiles?: Profiles;
  /**
   * References a publication
   */
  publicationId?: string;
  rules?: Rules;
  selectionEntries?: SelectionEntries;
  selectionEntryGroups?: SelectionEntryGroups;
  /**
   * References a selectionEntry, selectionEntryGroup or another selectionEntryLink
   */
  targetId: string;
  type?: "selectionEntry" | "selectionEntryGroup";
}
export interface SelectionEntry {
  categoryLinks?: CategoryLinks;
  collective?: boolean;
  comment?: string;
  costs?: Costs;
  constraints?: Constraints;
  entryLinks?: SelectionEntryLinks;
  hidden?: boolean;
  id: string;
  infoLinks?: InfoLinks;
  infoGroups?: InfoGroups;
  modifiers?: Modifiers;
  modifierGroups?: ModifierGroups;
  name: string;
  page?: number | string;
  profiles?: Profiles;
  /**
   * References a publication
   */
  publicationId?: string;
  rules?: Rules;
  selectionEntries?: SelectionEntries;
  selectionEntryGroups?: SelectionEntryGroups;
  type: string;
}
export interface SelectionEntryGroup {
  categoryLinks?: CategoryLinks;
  collective?: boolean;
  comment?: string;
  constraints?: Constraints;
  defaultSelectionEntryId?: string;
  entryLinks?: SelectionEntryLinks;
  hidden?: boolean;
  id: string;
  infoLinks?: InfoLinks;
  infoGroups?: InfoGroups;
  modifiers?: Modifiers;
  modifierGroups?: ModifierGroups;
  name: string;
  page?: number | string;
  profiles?: Profiles;
  /**
   * References a publication
   */
  publicationId?: string;
  rules?: Rules;
  selectionEntries?: SelectionEntries;
  selectionEntryGroups?: SelectionEntryGroups;
}
export interface ForceEntry {
  categoryLinks?: CategoryLinks;
  comment?: string;
  constraints?: Constraints;
  forceEntries?: ForceEntries1;
  hidden?: boolean;
  id: string;
  modifiers?: Modifiers;
  modifierGroups?: ModifierGroups;
  name: string;
  rules?: Rules;
}
export interface CharacteristicType {
  comment?: string;
  id: string;
  name: string;
}
export interface Publication {
  comment?: string;
  id: string;
  name: string;
  publicationDate?: string;
  publisher?: string;
  publisherUrl?: string;
  shortName?: string;
}
